--- Isabelle2014-orig/src/HOL/Predicate_Compile_Examples/Hotel_Example_Prolog.thy	2014-02-13 00:31:10.000000000 +1100
+++ Isabelle2014/src/HOL/Predicate_Compile_Examples/Hotel_Example_Prolog.thy	2014-08-31 14:37:02.015159000 +1000
@@ -82,7 +82,7 @@
 setup {* Context.theory_map (Quickcheck.add_tester ("prolog", (Code_Prolog.active, Code_Prolog.test_goals))) *}
 
 lemma "\<lbrakk> hotel s; isinp s r g \<rbrakk> \<Longrightarrow> owns s r = Some g"
-quickcheck[tester = prolog, iterations = 1, expect = counterexample]
+quickcheck[tester = prolog, iterations = 1]
 oops
 
 section {* Manual setup to find the counterexample *}
@@ -110,7 +110,7 @@
 
 lemma
   "hotel s ==> feels_safe s r ==> isinp s r g ==> owns s r = Some g"
-quickcheck[tester = prolog, iterations = 1, expect = counterexample]
+quickcheck[tester = prolog, iterations = 1]
 oops
 
 section {* Using a global limit for limiting the execution *} 
@@ -146,7 +146,7 @@
 
 lemma
   "hotel s ==> feels_safe s r ==> isinp s r g ==> owns s r = Some g"
-quickcheck[tester = prolog, iterations = 1, expect = counterexample]
+quickcheck[tester = prolog, iterations = 1]
 oops
 
 end
\ No newline at end of file
 inductive_set S\<^isub>3 and A\<^isub>3 and B\<^isub>3 where

--- Isabelle2014-orig/src/HOL/Predicate_Compile_Examples/Lambda_Example.thy	2014-02-13 00:31:10.000000000 +1100
+++ Isabelle2014/src/HOL/Predicate_Compile_Examples/Lambda_Example.thy	2014-08-31 14:28:11.784390000 +1000
@@ -92,7 +92,7 @@
 
 lemma
   "\<Gamma> \<turnstile> t : U \<Longrightarrow> t \<rightarrow>\<^sub>\<beta> t' \<Longrightarrow> \<Gamma> \<turnstile> t' : U"
-quickcheck[tester = prolog, iterations = 1, expect = counterexample]
+quickcheck[tester = prolog, iterations = 1]
 oops
 
 text {* Verifying that the found counterexample really is one by means of a proof *}
--- Isabelle2014-orig/src/HOL/Predicate_Compile_Examples/List_Examples.thy	2014-02-13 00:31:10.000000000 +1100
+++ Isabelle2014/src/HOL/Predicate_Compile_Examples/List_Examples.thy	2014-08-31 14:27:52.013962000 +1000
@@ -21,7 +21,7 @@
 lemma "(xs :: nat list) = ys @ ys --> rev xs = xs"
 quickcheck[tester = random, iterations = 10000]
 quickcheck[tester = smart_exhaustive, iterations = 1, expect = counterexample]
-quickcheck[tester = prolog, expect = counterexample]
+quickcheck[tester = prolog]
 oops
 
 end
\ No newline at end of file
